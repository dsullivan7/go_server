version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3

commands:
  aws-assume-role:
    description: Installs AWS CLI, setup the IAM user keys and assume specified role
    parameters:
      access_key_id:
        description: AWS Access Key ID Variable Name
        type: env_var_name
        default: AWS_ACCESS_KEY_ID
      secret_access_key:
        description: AWS Secret Access Key Variable Name
        type: env_var_name
        default: AWS_SECRET_ACCESS_KEY
      profile_name:
        description: AWS Profile Name
        type: string
        default: default
      account:
        description: AWS account in which the assumed role is
        type: string
      role:
        description: Role name
        type: string
    steps:
      - run: |
          temp_role=$(aws sts assume-role --role-arn "arn:aws:iam::<< parameters.account >>:role/<< parameters.role >>" --role-session-name "ci_session" --profile << parameters.profile_name >>) && \
          aws configure set aws_access_key_id $(echo $temp_role | jq .Credentials.AccessKeyId | xargs) --profile << parameters.profile_name >> && \
          aws configure set aws_secret_access_key $(echo $temp_role | jq .Credentials.SecretAccessKey | xargs) --profile << parameters.profile_name >> && \
          aws configure set aws_session_token $(echo $temp_role | jq .Credentials.SessionToken | xargs) --profile << parameters.profile_name >>

jobs:
  test:
    machine:
      image: ubuntu-2004:202104-01
    working_directory: ~/data
    steps:
      - checkout
      - run: make db-start
      - run: make db-init
      - run: make db-migrate
      - run: make test
  assume-role:
    executor: aws-cli/default
    steps:
      - aws-cli/setup
      - aws-assume-role:
          account: '408204130528'
          role: 'SunburstDevAdmin'

workflows:
  test:
    jobs:
      - test
      - assume-role
