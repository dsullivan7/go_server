version: 2.1

orbs:
  aws-cli: circleci/aws-cli@2.0.3
  aws-ecr: circleci/aws-ecr@7.0.0
  aws-ecs: circleci/aws-ecs@2.2.1

commands:
  aws-assume-role:
    description: Installs AWS CLI, setup the IAM user keys and assume specified role
    parameters:
      role:
        description: Role name
        type: string
    steps:
      - run: |
          temp_role=$(aws sts assume-role --role-arn "arn:aws:iam::${AWS_ACCOUNT_ID}:role/<< parameters.role >>" --role-session-name "ci_session") && \
          aws configure set aws_access_key_id $(echo $temp_role | jq .Credentials.AccessKeyId | xargs) && \
          aws configure set aws_secret_access_key $(echo $temp_role | jq .Credentials.SecretAccessKey | xargs) && \
          aws configure set aws_session_token $(echo $temp_role | jq .Credentials.SessionToken | xargs)

jobs:
  test:
    machine:
      image: ubuntu-2004:202104-01
    working_directory: ~/data
    steps:
      - checkout
      - run: make db-start
      - run: make db-init
      - run: make db-migrate
      - run: make test

  build:
    machine:
      image: ubuntu-2004:202104-01
    working_directory: ~/data
    steps:
      - checkout
      - run: make build
      - store_artifacts:
          path: ~/data/bin

  assume-role:
    executor: aws-cli/default
    environment:
      AWS_DEFAULT_REGION: us-east-2
      AWS_ACCOUNT_ID: '408204130528'
    steps:
      - aws-cli/setup
      - aws-assume-role:
          role: 'SunburstDevAdmin'

workflows:
  test:
    jobs:
      - test
      - build
      - assume-role
